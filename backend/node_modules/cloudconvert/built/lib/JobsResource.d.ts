import CloudConvert from './CloudConvert';
import { type FileResult, type Operation, type Task, type TaskEventData, type TaskStatus } from './TasksResource';
export type JobEvent = 'created' | 'updated' | 'finished' | 'failed';
export type JobStatus = 'processing' | 'finished' | 'error';
export type JobTaskStatus = Task['status'] | 'queued';
export interface JobEventData {
    job: Job;
}
export interface Job {
    id: string;
    tag: string | null;
    status: TaskStatus;
    created_at: string;
    started_at: string | null;
    ended_at: string | null;
    tasks: JobTask[];
}
type NotPresentWhenInsideJob = 'job_id' | 'status';
export interface JobTask extends Omit<Task, NotPresentWhenInsideJob> {
    name: string;
    status: JobTaskStatus;
}
export default class JobsResource {
    private readonly cloudConvert;
    constructor(cloudConvert: CloudConvert);
    get(id: string, query?: object): Promise<Job>;
    wait(id: string): Promise<Job>;
    all(query?: {
        'filter[status]'?: JobStatus;
        'filter[tag]'?: string;
        include?: string;
        per_page?: number;
        page?: number;
    }): Promise<Job[]>;
    create(data?: JobTemplate): Promise<Job>;
    delete(id: string): Promise<void>;
    subscribeEvent(id: string, event: string, callback: (event: JobEventData) => void): Promise<void>;
    subscribeTaskEvent(id: string, event: string, callback: (event: TaskEventData) => void): void;
    getExportUrls(job: Job): FileResult[];
}
type PossibleOperationStrings = Operation['operation'];
interface NamedOperation<O> {
    operation: O;
}
type OperationByName<O> = Extract<Operation, NamedOperation<O>>;
type OperationData<O> = OperationByName<O>['data'];
interface TaskExtras<O> extends NamedOperation<O> {
    ignore_error?: boolean;
}
type TaskTemplate<O> = TaskExtras<O> & OperationData<O>;
type Distribute<U> = U extends unknown ? TaskTemplate<U> : never;
type PossibleOperations = Distribute<PossibleOperationStrings>;
interface TaskContainer {
    [name: string]: PossibleOperations;
}
export interface JobTemplate {
    tasks: TaskContainer;
    tag?: string;
    webhook_url?: string;
}
export {};
