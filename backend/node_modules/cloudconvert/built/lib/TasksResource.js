"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const CloudConvert_1 = require("./CloudConvert");
class TasksResource {
    constructor(cloudConvert) {
        this.cloudConvert = cloudConvert;
    }
    get(id, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.cloudConvert.call('GET', `tasks/${id}`, query);
        });
    }
    wait(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const baseURL = this.cloudConvert.useSandbox
                ? 'https://sync.api.sandbox.cloudconvert.com/v2/'
                : `https://${this.cloudConvert.region ? this.cloudConvert.region + '.' : ''}sync.api.cloudconvert.com/v2/`;
            return yield this.cloudConvert.callWithBase(baseURL, 'GET', `tasks/${id}`);
        });
    }
    cancel(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.cloudConvert.call('POST', `tasks/${id}/cancel`);
        });
    }
    all(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.cloudConvert.call('GET', 'tasks', query);
        });
    }
    create(operation, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.cloudConvert.call('POST', operation, data);
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cloudConvert.call('DELETE', `tasks/${id}`);
        });
    }
    upload(task, stream, filename, fileSize) {
        return __awaiter(this, void 0, void 0, function* () {
            if (task.operation !== 'import/upload') {
                throw new Error('The task operation is not import/upload');
            }
            if (task.status !== 'waiting' || !task.result || !task.result.form) {
                throw new Error('The task is not ready for uploading');
            }
            const uploadFile = new CloudConvert_1.UploadFile(stream, filename, fileSize);
            for (const parameter in task.result.form.parameters) {
                uploadFile.add(parameter, task.result.form.parameters[parameter]);
            }
            return yield this.cloudConvert.call('POST', task.result.form.url, uploadFile, { presigned: true, flat: true });
        });
    }
    subscribeEvent(id, event, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.cloudConvert.subscribe(`private-task.${id}`, `task.${event}`, callback);
        });
    }
}
exports.default = TasksResource;
//# sourceMappingURL=TasksResource.js.map