"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadFile = void 0;
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const node_stream_1 = require("node:stream");
const socket_io_client_1 = require("socket.io-client");
const package_json_1 = require("../package.json");
const JobsResource_1 = __importDefault(require("./JobsResource"));
const SignedUrlResource_1 = __importDefault(require("./SignedUrlResource"));
const TasksResource_1 = __importDefault(require("./TasksResource"));
const UsersResource_1 = __importDefault(require("./UsersResource"));
const WebhooksResource_1 = __importDefault(require("./WebhooksResource"));
function unifySources(data) {
    return __asyncGenerator(this, arguments, function* unifySources_1() {
        var _a, e_1, _b, _c;
        if (data instanceof Uint8Array) {
            yield yield __await(data);
            return yield __await(void 0);
        }
        if (data instanceof Blob) {
            yield yield __await(data.bytes());
            return yield __await(void 0);
        }
        if (Symbol.iterator in data) {
            yield __await(yield* __asyncDelegator(__asyncValues(data)));
            return yield __await(void 0);
        }
        if (Symbol.asyncIterator in data) {
            try {
                for (var _d = true, data_1 = __asyncValues(data), data_1_1; data_1_1 = yield __await(data_1.next()), _a = data_1_1.done, !_a; _d = true) {
                    _c = data_1_1.value;
                    _d = false;
                    const chunk = _c;
                    if (typeof chunk === 'string')
                        throw new Error('bad file data, received string but expected Uint8Array');
                    yield yield __await(chunk);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = data_1.return)) yield __await(_b.call(data_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
            return yield __await(void 0);
        }
    });
}
function guessNameAndSize(source, fileName, fileSize) {
    var _a, _b, _c, _d;
    const path = 'path' in source && typeof source.path === 'string'
        ? source.path
        : undefined;
    const name = (_a = fileName !== null && fileName !== void 0 ? fileName : (path !== undefined ? (0, node_path_1.basename)(path) : undefined)) !== null && _a !== void 0 ? _a : 'file';
    const size = (_c = (_b = fileSize !== null && fileSize !== void 0 ? fileSize : (source instanceof Uint8Array ? source.byteLength : undefined)) !== null && _b !== void 0 ? _b : (source instanceof Blob ? source.size : undefined)) !== null && _c !== void 0 ? _c : (path !== undefined
        ? (_d = (0, node_fs_1.statSync)(path, { throwIfNoEntry: false })) === null || _d === void 0 ? void 0 : _d.size
        : undefined);
    if (size === undefined) {
        throw new Error('Could not determine the number of bytes, specify it explicitly when calling `upload`');
    }
    return { name, size };
}
class UploadFile {
    constructor(data, filename, fileSize) {
        this.attributes = [];
        this.data = unifySources(data);
        const { name, size } = guessNameAndSize(data, filename, fileSize);
        this.filename = name;
        this.fileSize = size;
    }
    add(key, value) {
        this.attributes.push([key, value]);
    }
    toMultiPart(boundary) {
        const enc = new TextEncoder();
        const prefix = [];
        const suffix = [];
        prefix.push(enc.encode(`--${boundary}\r\n`));
        const separator = enc.encode(`\r\n--${boundary}\r\n`);
        let first = true;
        for (const [key, value] of this.attributes) {
            if (value == null)
                continue;
            if (!first)
                prefix.push(separator);
            prefix.push(enc.encode(`content-disposition:form-data;name="${key}"\r\n\r\n${value}`));
            first = false;
        }
        if (!first)
            prefix.push(separator);
        prefix.push(enc.encode(`content-disposition:form-data;name="file";filename=${this.filename}\r\ncontent-type:application/octet-stream\r\n\r\n`));
        const data = this.data;
        suffix.push(enc.encode(`\r\n--${boundary}--\r\n`));
        const size = prefix.reduce((sum, arr) => sum + arr.byteLength, 0) +
            this.fileSize +
            suffix.reduce((sum, arr) => sum + arr.byteLength, 0);
        function concat() {
            return __asyncGenerator(this, arguments, function* concat_1() {
                yield __await(yield* __asyncDelegator(__asyncValues(prefix)));
                yield __await(yield* __asyncDelegator(__asyncValues(data)));
                yield __await(yield* __asyncDelegator(__asyncValues(suffix)));
            });
        }
        return { size, stream: concat() };
    }
}
exports.UploadFile = UploadFile;
class CloudConvert {
    constructor(apiKey, useSandbox = false, region = null) {
        this.apiKey = apiKey;
        this.useSandbox = useSandbox;
        this.region = region;
        this.tasks = new TasksResource_1.default(this);
        this.jobs = new JobsResource_1.default(this);
        this.users = new UsersResource_1.default(this);
        this.webhooks = new WebhooksResource_1.default();
        this.signedUrls = new SignedUrlResource_1.default();
    }
    call(method, route, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const baseURL = this.useSandbox
                ? 'https://api.sandbox.cloudconvert.com/v2/'
                : `https://${this.region ? this.region + '.' : ''}api.cloudconvert.com/v2/`;
            return yield this.callWithBase(baseURL, method, route, parameters, options);
        });
    }
    callWithBase(baseURL, method, route, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const presigned = (_a = options === null || options === void 0 ? void 0 : options.presigned) !== null && _a !== void 0 ? _a : false;
            const flat = (_b = options === null || options === void 0 ? void 0 : options.flat) !== null && _b !== void 0 ? _b : false;
            const url = new URL(route, baseURL);
            const { contentLength, contentType, search, body } = prepareParameters(method, parameters);
            if (search !== undefined) {
                url.search = search;
            }
            const headers = Object.assign(Object.assign(Object.assign({ 'User-Agent': `cloudconvert-node/v${package_json_1.version} (https://github.com/cloudconvert/cloudconvert-node)` }, (!presigned ? { Authorization: `Bearer ${this.apiKey}` } : {})), (contentLength ? { 'Content-Length': contentLength } : {})), (contentType ? { 'Content-Type': contentType } : {}));
            const res = yield fetch(url, {
                method,
                headers,
                body,
                duplex: 'half'
            });
            if (!res.ok) {
                throw new Error(res.statusText, { cause: res });
            }
            if (!((_c = res.headers
                .get('content-type')) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes('application/json'))) {
                return undefined;
            }
            const json = yield res.json();
            return flat ? json : json.data;
        });
    }
    subscribe(channel, event, callback) {
        var _a, _b;
        if (!this.socket) {
            this.socket = (0, socket_io_client_1.io)(this.useSandbox
                ? 'https://socketio.sandbox.cloudconvert.com'
                : 'https://socketio.cloudconvert.com', { transports: ['websocket'] });
            this.subscribedChannels = new Map();
        }
        if (!((_a = this.subscribedChannels) === null || _a === void 0 ? void 0 : _a.get(channel))) {
            this.socket.emit('subscribe', {
                channel,
                auth: { headers: { Authorization: `Bearer ${this.apiKey}` } }
            });
            (_b = this.subscribedChannels) === null || _b === void 0 ? void 0 : _b.set(channel, true);
        }
        this.socket.on(event, function (eventChannel, eventData) {
            if (channel !== eventChannel) {
                return;
            }
            callback(eventData);
        });
    }
    closeSocket() {
        var _a;
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.close();
    }
}
exports.default = CloudConvert;
function prepareParameters(method, data) {
    if (data === undefined) {
        return {};
    }
    if (method === 'GET') {
        const entries = Object.entries(data !== null && data !== void 0 ? data : {});
        return { search: new URLSearchParams(entries).toString() };
    }
    if (data instanceof UploadFile) {
        const boundary = `----------${Array.from(Array(32))
            .map(() => Math.random().toString(36)[2] || 0)
            .join('')}`;
        const { size, stream } = data.toMultiPart(boundary);
        return {
            contentLength: size.toString(),
            contentType: `multipart/form-data; boundary=${boundary}`,
            body: asyncIterableToReadableStream(stream)
        };
    }
    return { contentType: 'application/json', body: JSON.stringify(data) };
}
function asyncIterableToReadableStream(it) {
    const r = node_stream_1.Readable.from(it);
    return node_stream_1.Readable.toWeb(r);
}
//# sourceMappingURL=CloudConvert.js.map